/**
 * Represents an article.
 */
class Article {
  /**
   * Creates an instance of Article.
   * @param {object} params - The parameters for creating an article.
   * @param {string} [params.articleId] - The ID of the article. Can be auto-generated by Firestore or passed in.
   * @param {string} params.title - The title of the article.
   * @param {string} params.content - The content of the article.
   * @param {string} params.author - The author of the article.
   * @param {Date} params.publicationDate - The publication date of the article. Expecting a JavaScript Date object.
   * @param {Date} params.lastModifiedDate - The last modified date of the article. Expecting a JavaScript Date object.
   * @param {string} [params.category="General"] - The category of the article.
   * @param {Array<string>} [params.tags=[]] - The tags associated with the article.
   * @param {string} [params.imageUrl=""] - The URL of the image associated with the article.
   * @param {boolean} [params.isPublished=false] - Whether the article is published.
   */
  constructor({
    articleId, // Can be auto-generated by Firestore or passed in
    title,
    content,
    author,
    publicationDate, // Expecting a JavaScript Date object
    lastModifiedDate, // Expecting a JavaScript Date object
    category = "General",
    tags = [],
    imageUrl = "",
    isPublished = false,
  }) {
    if (!title || typeof title !== "string" || title.trim() === "") {
      throw new Error("Article: title is required and must be a non-empty string.");
    }
    if (!content || typeof content !== "string" || content.trim() === "") {
      throw new Error("Article: content is required and must be a non-empty string.");
    }
    if (!author || typeof author !== "string" || author.trim() === "") {
      throw new Error("Article: author is required and must be a non-empty string.");
    }
    if (!publicationDate || !(publicationDate instanceof Date) || isNaN(publicationDate.getTime())) {
      throw new Error("Article: Invalid or missing publicationDate. Must be a valid Date object.");
    }
    if (!lastModifiedDate || !(lastModifiedDate instanceof Date) || isNaN(lastModifiedDate.getTime())) {
      throw new Error("Article: Invalid or missing lastModifiedDate. Must be a valid Date object.");
    }
    if (lastModifiedDate < publicationDate) {
      throw new Error("Article: lastModifiedDate cannot be before publicationDate.");
    }

    this.articleId = articleId;
    this.title = title.trim();
    this.content = content; // Content can be long, further validation might be needed depending on storage/display
    this.author = author.trim();
    this.publicationDate = publicationDate;
    this.lastModifiedDate = lastModifiedDate;
    this.category = typeof category === "string" ? category.trim() : "General";
    this.tags = Array.isArray(tags) ? tags.map((tag) => String(tag).trim()).filter((tag) => tag) : [];
    this.imageUrl = typeof imageUrl === "string" ? imageUrl.trim() : "";
    this.isPublished = typeof isPublished === "boolean" ? isPublished : false;
  }

  /**
   * Converts the Article instance to a plain JavaScript object.
   * @return {object} A plain JavaScript object representing the article.
   */
  toMap() {
    const map = {
      title: this.title,
      content: this.content,
      author: this.author,
      publication_date: this.publicationDate,
      last_modified_date: this.lastModifiedDate,
      category: this.category,
      tags: this.tags,
      image_url: this.imageUrl,
      is_published: this.isPublished,
    };
    // Only include article_id in the map if it's provided (meant to be a field, not the doc ID)
    // Typically, Firestore document ID is handled separately.
    if (this.articleId) {
      map.article_id_field = this.articleId; // Named differently to avoid confusion with doc ID
    }
    return map;
  }
}

module.exports = {
  Article,
};
