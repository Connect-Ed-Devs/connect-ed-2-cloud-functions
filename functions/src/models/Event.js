export class Event {
    constructor({
        eventId, // Can be auto-generated by Firestore or passed in
        title,
        description,
        startDate, // Expecting a JavaScript Date object
        endDate,   // Expecting a JavaScript Date object, optional
        location,
        category = 'General',
        organizer = '',
        imageUrl = '',
        registrationLink = '',
        isFeatured = false,
    }) {
        if (!title || typeof title !== 'string' || title.trim() === '') {
            throw new Error("Event: title is required and must be a non-empty string.");
        }
        if (!description || typeof description !== 'string' || description.trim() === '') {
            throw new Error("Event: description is required and must be a non-empty string.");
        }
        if (!startDate || !(startDate instanceof Date) || isNaN(startDate.getTime())) {
            throw new Error("Event: Invalid or missing startDate. Must be a valid Date object.");
        }
        if (endDate && (!(endDate instanceof Date) || isNaN(endDate.getTime()))) {
            throw new Error("Event: Invalid endDate. Must be a valid Date object if provided.");
        }
        if (endDate && endDate < startDate) {
            throw new Error("Event: endDate cannot be before startDate.");
        }
        if (!location || typeof location !== 'string' || location.trim() === '') {
            throw new Error("Event: location is required and must be a non-empty string.");
        }

        this.eventId = eventId;
        this.title = title.trim();
        this.description = description.trim();
        this.startDate = startDate;
        this.endDate = endDate || null; // Store as null if not provided
        this.location = location.trim();
        this.category = typeof category === 'string' ? category.trim() : 'General';
        this.organizer = typeof organizer === 'string' ? organizer.trim() : '';
        this.imageUrl = typeof imageUrl === 'string' ? imageUrl.trim() : '';
        this.registrationLink = typeof registrationLink === 'string' ? registrationLink.trim() : '';
        this.isFeatured = typeof isFeatured === 'boolean' ? isFeatured : false;
    }

    toMap() {
        const map = {
            title: this.title,
            description: this.description,
            start_date: this.startDate,
            end_date: this.endDate,
            location: this.location,
            category: this.category,
            organizer: this.organizer,
            image_url: this.imageUrl,
            registration_link: this.registrationLink,
            is_featured: this.isFeatured,
        };
        if (this.eventId) {
            map.event_id_field = this.eventId; // Named differently to avoid confusion with doc ID
        }
        return map;
    }
}

